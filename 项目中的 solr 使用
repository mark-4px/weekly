项目中的 solr 使用


以 新增 速卖通 刊登的 solr搜索 为例

1. 服务器 地址及 账户密码

	172.16.30.82 
	user : roor
	pas  : q1w2e3r4
	port : 22


2. solr 文件目录
	
	solr : /usr/local/solr/dev_home
	/usr/local/solr/ 下面有几个home的 目录是不同环境的，
	开发环境 、L M X 环境的，请修改 开发环境的，其它环境不要动


3. tomcat目录
	/usr/local/tomcat/tomcat_dev_solr
	跟solr目录相同 ，tomcat也是 有 几个不同的对应 不同的环境

4. 访问 可视化 管理界面

	本地开发环境 ： 172.16.30.82:10087/solr

	另 ： 如果新增或者修改 配置 目前得到的做法是 直接到 对应的目录下 重启对应的tomcat


3. 新增 速卖通 模块的 方式是

	到/usr/local/solr/home 目录下 复制一份 order/trade的文件夹并修改名称listingae

	里面有两个文件需要修改
	solor查询实体配置文件(返回结果对象中的值)
	/usr/local/solr/home/listingae/conf/schema.xml

	和
	DB <---> solr 实体 映射文件 ，上面的实体对象和 数据表结构的 映射关系
	/usr/local/solr/dev_home/listingae/conf/db/db-data-config.xml


4. schema.xml 简单介绍

	从文本 最下面 看
	<!-- 列表中需要查询的列都定义在这里-->
	<fields>
    	<!-- index=true 表示 会按照这个 关键字建立索引-->
    	<!-- stored=true 表示查询结果中 当前字段的数据有值-->
    	<field name="listingAe.id" type="int" indexed="true" stored="true"/>
    	<field name="listingAe.power" type="string" indexed="true" stored="false" multiValued="true"/>
    	<field name="listingAe.aeSubject" type="string" indexed="false" stored="true"/>
    	<field name="listingAe.aeKeyword" type="string" indexed="false" stored="true"/>
    </fields>

    <!-- 复制字段，作用是 匹配模糊搜索字段，把需要模糊的字段放到 一个字段中，模糊匹配，方便使用 -->
    <!-- 如果 不采用这种方式 模糊匹配的时候 可能就 需要匹配很多字段，会不方便-->
    <copyField source="listingAe.aeSubject" dest="listingAe.power" maxChars="500" />
  	<copyField source="listingAe.aeKeyword" dest="listingAe.power" maxChars="500"/>


5. db-data-config.xml 简单介绍
	
	<dataSource name="trade" jndiName = "java:comp/env/jdbc/trade" type="JdbcDataSource"/>
	是配置的mysql数据源
	配置 文件在
	tomcat下面
	/usr/local/tomcat/tomcat_dev_solr/conf/Catalina/localhost/solr.xml

	<entity name="order" 
		pk="id"
		query="call get_solr_order_full();"
		deltaQuery="SELECT 1 AS id;"
		deltaImportQuery="call get_solr_order('${dih.last_index_time}');"
		transformer="RegexTransformer">

		solr中 目前 我们系统使用的 有三种 更新方式
		第一个是 全量更新 适合初始化的时候
		query="call get_solr_order_full();"
		第二个是增量更新 适合 定时更新索引的情况
		deltaImportQuery="call get_solr_order('${dih.last_index_time}');"

		第三种是 系统中的 mybatis插件实现的实时更新

		下面的配置都是 映射关系，没什么好说的

6. 代码使用搜索

	目前系统中的使用
	ISolrService
	参考订单的搜索
	OrderSolrServiceImpl

7. 整体的实现思路

给solor配置上数据源以及查询结果集

使用solr建立索引

使用solr索引进行搜索

这里的搜索和一般理解不一样，这里的搜索不仅是找到 指定的记录，还包括我们需要查询的字段的值

也就是说 solor会有设置属性 让我们去指定 哪些字段需要创建索引，哪些字段是 我们查询结果中需要返回的

solr可以设置 定时 更新索引 ，也可以通过 mybatis的插件 来实现 在 执行DB的某些操作的时候出发单条数据的索引更新
也就是实时更新，具体配置参考
ce/ce-main/ce-foundation/src/main/resources/mybatis/mybatis-solr-mapping.xml
简单举例


from 指的是 操作DB的实体对象的属性 
to 指的是 solor中的返回对象属性


<mapping-define id="order_column">
    <mappings>
        <mapping from="status" to="status" />


--------------------------------------------------------------
这里的大部分 都类似mybatis的配置
其中id 对应mybatis mapping中定义的更新update方法
name 对应 
/usr/local/solr/dev_home/listingae/conf/db/db-data-config.xml
中的name
 <entity name="listingae" 

<mybatis-mapper namespace="fpx.mybatis.PlatformAccount">
    <mybatis-statements>
        <mybatis-statement id="update">
            <solr-documents>
                <solr-document name="order" invoker="com.fpx.ce.module.trade.utils.PlatformAccountSolrInvoker"/>
            </solr-documents>
        </mybatis-statement>
    </mybatis-statements>
</mybatis-mapper>






